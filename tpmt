#!/bin/zsh

# most functions get their arguments from global variables in order to keep
# their code simple. Parsing of command line arguments thus only needs to
# take place in one place, in the main code.
#
# Global variables set algorithmically have lowercase names; variables that
# are used to pass in values from the execution environment have
# all-uppercase names.

# global vars that'll be set based on cli arguments:
force=0		# Whether to override sanity checks
		# (may support forcing certain things but not others in the future)
quiet=0		# Whether to suppress normal output
verbose=0	# Whether to be verbose (may have more than one level in the
		# future)
revctrl=svn	# What revision control backend to use. Only svn and noop are
		# supported for now. git should be easy to add naively, but
		# conflict resolution and stuff like branching and merging is going
		# to be a bear.

TPMT_SECCURE_CURVE=${TPMT_SECCURE_CURVE:-p256}	# the elliptic curve to use.
# Has to stay the same for the lifetime of the repository!
# TODO: instead, store key metadata, such as the curve used, and thus support
# gradual encryption upgrades.

TPMT_SALT_CHARS=${TPMT_SALT_CHARS:-16} # how many characters of random salt to add to the passphrase before using it to generate a pubkey
# (depending on the mechanism used to generate the salt, the actual salt may be longer)

TPMT_USERNAME=${TPMT_USERNAME:-$LOGNAME}	# if not inherited, we default to the local username
# command line can override this

TPMT_MAC_BITS=${TPMT_MAC_BITS:-0}	# number of bits of MAC to use for integrity protection of stored passwords.
# We don't really benefit from this, so set it to zero to reduce stored password length, but allow it to be overridden.
# If you change this after adding passwords, the old passwords will become unreadable (until you change it back).

# exit codes:
error_key_exists=1	# trying to add key with a keyid that already exists
error_cant_create_dir=2	# failed to create subdirectory
error_cant_commit_pubkey=3	# failed to commit new pubkey to revision control
error_cant_generate_key=4	# failed to generate public key (seccure returned error)
error_cant_commit_userdirs=5	# failed to commit {pubkeys,revoked-keys,lost-keys}/username to revision control
error_cant_create_pwid=6	# failed to create directory for new password
error_no_pubkey=7			# trying to encrypt a password for a use who doesn't have a current pubkey
error_cant_encrypt_password=8	# failed to use seccure-encrypt to save encrypted password
error_failed_commit_password=9	# failed to commit directory of newly added password
error_revctrl_update=253	# revision control "update" operation failed
error_revctl=254	# internal error in revision control api abstraction (e.g. unimplemented operation)

# depending on the value of $verbose, output various diagnostic messages
# to stderr
#
# uses global $verbose
#
# args:
#	messagelevel (currently ignored, will be used to implement verbosity levels)
#	message
function log() {
	if [[ "$verbose" -gt 0 ]]; then
		shift	# ignore messagelevel for now
		echo "$@" >&2
	fi
}

# prints an error message to stderr
function error() {
	echo "$@" >&2
}

# prints an error message, then exits with the exit status given in the first arg
function die() {
	local exit=$1
	shift
	echo "$@" >&2
	exit $exit
}	

# revision control API abstraction; for now, just support svn and "noop"
# (which does nothing)
#
# uses global $revctrl, $commitmessage
#
# args: operation operand1 [ operand2 ... ]
#
# operations:
#
#	check (returns success if $revctrl is set to a supported value; prints an error message and exits otherwise)
#	add (operands are files and/or directories)
#	commit (operands are files and/or directories; commit message comes from $commitmessage)
#		every commit is automatically preceded and followed by an update
#	add-and-commit
#	revert
#	delete
#	delete-and-commit
#	update
function revctrl() {
	# The main concern here is to avoid trying to be too smart.
	# If there is a problem, we'll let the user deal with it; trying to do it
	# automatically would just lead to screwing things up worse.
	local unknown_op=0
	local unknown_revctrl=0
	local ret=0
	case "$revctrl" in
		noop|none) return 0;;
		svn|subversion)	# TODO: add -q if verbose=0
			case "$1" in
				add)
					shift
					svn add $@
					ret=$?
					;;
				commit)
					shift
					svn commit -m "$commitmessage" $@
					ret=$?
					;;
				add-and-commit) # TODO: add error checking/handling
					shift
					revctrl add $@
					ret=$?
					revctrl commit $@
					((ret+=$?))
					;;
				revert)
					shift
					svn revert $@
					ret=$?
					;;
				delete)
					shift
					svn del $@
					ret=$?
					;;
				delete-and-commit) # TODO: add error checking/handling
					shift
					revctrl delete $@
					ret=$?
					revctrl commit $@
					((ret+=$?))
					;;
				check) return 0;;
				update)
					svn up
					ret=$?
					if [[ "$ret" -gt 0 ]]; then
						error "$0: error: svn update failed."
						if [[ "$force" = 0 ]]; then
							# We don't know how bad it is. Better let the user deal with it.
							die $error_revctrl_up "Refusing to continue; please fix your working copy manually and make sure 'svn up' succeeds."
						else
							log 1 "Continuing anyway because force enabled."
						fi
					fi
					;;
				*) unknown_op=1;;
			esac
		*) unknown_revctrl=1;;
	esac
	if [[ $unknown_revctrl = 1 ]]; then
		die $error_revctl "$0: error: revision control mechanism '$revctrl' is not implemented."
	elif [[ $unknown_op = 1 ]]; then
		echo -n "$0: internal error: revision control operation '$1' not implemented for backend '$revctrl'." >&2
		if [[ "$force" -gt 0 ]]; then
			echo "\nContinuing anyway (with no revision control) because force is enabled." >&2
			return 0
		else
			die $error_revctl " Aborting."
		fi
	fi
	return $ret
}

# obtains filename of most recent non-revoked, non-lost pubkey of $username
# uses global $username
# sets global $currentkey
function get_current_pubkey() {
	if [[ -n "$currentkeys[$username]" ]]; then
		currentkey="$currentkeys[$username]"
	else
		pushd -q pubkeys/"$username"
		# keyids are numeric, and the numeric order equals the temporal order (since the names are timestamps)
		# The egrep helps filter out junk so we don't accidentally treat a non-keyfile as a keyfile.
		currentkey=$(pwd)/$(ls -1 | egrep "^[0-9]+$" | sort -n | tail -n 1)
		[[ -r "$currentkey" ]] && currentkeys[$username]="$currentkey" || unset currentkey
		popd -q
	fi
}

# generate a random string to use as passphrase salt using whatever means is available
# outputs salt to stdout
function make_salt() {
	local salt=""
	[[ "$TPMT_SALT_CHARS" -gt 0 ]] || return
	if whence pwgen >/dev/null; then
		log 3 "Using pwgen to generate salt."
		pwgen -cnys1 $TPMT_SALT_CHARS 1
	elif whence makepasswd >/dev/null; then
		log 3 "Using makepasswd to generate salt."
		makepasswd --chars=$TPMT_SALT_CHARS
	elif [[ -c /dev/random ]]; then
		log 2 "Cobbling together a salt using /dev/random directly."
		while [[ $#salt -lt $TPMT_SALT_CHARS ]]; do
			salt="$salt$(head -c 1 </dev/random | tr -c -d '[[:graph:]]')"
		done
		echo "$salt"
	elif [[ -c /dev/urandom ]]; then
		log 1 "Warning: generating salt using insecure pseudorandom generator. Install makepasswd or pwgen."
		while [[ $#salt -lt $TPMT_SALT_CHARS ]]; do
			salt="$salt$(head -c 1 </dev/urandom | tr -c -d '[[:graph:]]')"
		done
		echo "$salt"
	else
		# generate something using the pseudo-random generator of zsh
		log 1 "Warning: generating salt using insecure pseudorandom generator. Install makepasswd or pwgen."
		typeset -i rndchr
		local i
		for i in {1..$TPMT_SALT_CHARS}; do
			rndchr=$[RANDOM%94+33]	# ascii "!" (33) to "~" (126)
			echo -n "\0$rndchr"
		done
		echo
	fi
}

# initialize a new repository
#
# args: $directory; defaults to .
function initrep() {
	local dir=${directory:-.}
	log 1 "Creating 'passwords', 'pubkeys', 'revoked-keys' and 'lost-keys' subdir under $dir."
	mkdir -p "$dir"/{passwords,pubkeys,revoked-keys,lost-keys}
	cd "$dir"
	log 1 "Committing 'passwords', 'pubkeys', 'revoked-keys' and 'lost-keys' to revision control."
	commitmessage="tpmt: repository init" revctrl add-and-commit passwords pubkeys revoked-keys lost-keys
}

# add a new public key
#
# args: $username; defaults to $TPMT_USERNAME, prompts interactively if
# needed
# assumes cwd is repository root
function add_pubkey() {
	# normally, people shouldn't add other people's pubkeys (those other
	# people should add their own); we'll bail unless --force is in
	# effect
	local username="${username:-$TPMT_USERNAME}"
	local pass1=foo	# we'll read the plaintext passphrase into these variables
	local pass2=bar
	while [[ -z "$username" ]] || ! [[ $username =~ ^[[:print:]]+$ ]]; then	# TODO: investigate whether [[:print:]] is the best choice of characters to allow in usernames
		read username?"Enter username to create and add a key for: "
	fi
	for dir in pubkeys revoked-keys lost-keys; do
	if ! [[ -d $dir/"$username" ]]; then
		if mkdir -p $dir/"$username"; then
			revctrl add $dir/"$username"
		else
			die $error_cant_create_dir "Error: unable to create $(pwd)/pubkeys/$username."
		fi
		if ! commitmessage="tpmt: add empty pubkeys, revoked-keys and lost-keys subdirectory for $username" revctrl commit {pubkeys,revoked-keys,lost-keys}/"$username"; then
			error "Error: couldn't commit $(pwd)/{pubkeys,revoked-keys,lost-keys}/$username to revision control. Please sort this out manually."
			if [[ "$force" = 0 ]]; then
				# We don't know how broken the working copy is. Better let the user deal with it.
				die $error_cant_commit_userdirs "Refusing to continue; either revert the working copy and remove the directories we just added, or commit them yourself."
			else
				log 1 "Continuing anyway because force enabled."
			fi
		fi
	fi
	keyid=$EPOCHSECONDS
	if [[ -f "pubkeys/$username/$keyid" ]]; then
		die $error_key_exists "Error: $username already has a key with keyid $keyid. You can't generate more than one pubkey per second."
	fi
	salt=$(make_salt)
	log 2 "The random salt for your passphrase is: '$salt'"
	# this is insecure on a multiuser system:
	while [[ "$pass1" != "$pass2" ]]; do
		read -s pass1?"Please enter passphrase to generate a public key from: "
		read -s pass2?"Enter it again: "
		[[ "$pass1" = "$pass2" ]] || error "The passphrases do not match."
	done
	# this is insecure on a multiuser system:
	if seccure-key -F <(echo "$salt$pass1") -c $TPMT_SECCURE_CURVE -q >pubkeys/"$username/$keyid"; then
		echo "$salt" >>"$pubkeys/$username/$keyid"
		if ! commitmessage="tpmt: add pubkey for $username (curve used: $TPMT_SECCURE_URVE), keyid: $keyid" revctrl add-and-commit pubkeys/"$username/$keyid"; then
			error "Error: committing pubkey failed. Perhaps you're trying to add a pubkey for a user other than yourself?"
			if [[ "$force" = 0 ]]; then
				# we don't know how far along things are; did adding the pubkey fail, or just committing it? Better let the user deal with it.
				die $error_cant_commit_pubkey "Refusing to continue; revert the working copy and remove the $(pwd)/pubkeys/$username/$keyid manually, then retry."
			else
				log 1 "Continuing anyway because force enabled."
			fi
		fi
	else
		error "Error: failed to generate public key."
		rm pubkeys/"$username"
		exit $error_cant_generate_key
	fi
	# TODO: re-encrypt all passwords encrypted with any of the older keys with the new key.
}

# revoke a public key and replace it with a new one. Force a password change
# on all affected passwords.
#
# args: $revoke_username $username (defaults to $TPMT_USERNAME)
function revoke_pubkey() {
}

# adds a password to the database
#
# uses globals:
#	$username	our own username
#	$grant_users[@]	who to grant access to
#	$comment	comment to store for password (under passwords/pwid/comments/currentuser)
#	$pwid		unique ID of password, if given (otherwise we contsruct it from the keywords)
#	$keywords[@]	password keywords, e.g. "attic wrt54g admin"
function add_password() {
	local pass1=foo	# we'll read the plaintext password into these variables
	local pass2=bar
	# sanity check: before we even start, does $username have a pubkey?
	[[ -n "$currentkey" ]] || get_current_pubkey
	if [[ -z "$currentkey" ]]; then
		die $error_no_pubkey "Error: you don't have a public key to encrypt this password with. (My idea of your username is: '$username')."
	fi
	while ! [[ $keywords[@] =~ [[:alnum:]] ]]; do
		# we absolutely must have keywords, so prompt for them interactively
		read -A keywords?"Please enter some keywords for your new password to be able to identify it later: "
	done
	if [[ -z "$pwid" ]]; then	# if the user supplied a pwid, use it even if it's all whitespace; if they want to shoot themselves in the foot, let them
		for kw in $keywords[@]; do pwid="${pwid:+${pwid}_}$kw"; done
	fi
	keydir="passwords/$pwid"
	# we want to add an commit the whole shebang in a single transaction; no committing the empty directory here
	if ! mkdir -p "$keydir"; then
		die $error_cant_create_pwid "Error: couldn't create $(pwd)/$keydir."
	fi
	if ! mkdir -p "$keydir/comments"; then
		rm -rf "$keydir"
		die $error_cant_create_pwid "Error: couldn't create $(pwd)/$keydir/comments."
	fi
	echo "$comment" >"$keydir/comments/$username"
	for kw in $keywords[@]; do
		echo "$kw" >>"$keydir/keywords"
	done
	# this is insecure on a multiuser system:
	while [[ "$pass1" != "$pass2" ]]; do
		read -s pass1?"Please enter plaintext password to be encrypted and stored: "
		read -s pass2?"Enter it again: "
		[[ "$pass1" = "$pass2" ]] || error "The passwords do not match."
	done
	passwords["$pwid"]="$pass1"	# this is insecure on a multiuser system
	timestamp=$EPOCHSECONDS
	salt=$(make_salt)
	log 2 "The random salt of the password is: '$salt'"
	echo "$salt" >"$keydir/salt"
	passwords["$pwid"]="$pass1"	# this is insecure on a multiuser system
	pwsalts["$pwid"]="$salt"
	# this is insecure on a multiuser system:
	echo "$salt$pass1" \
		| seccure-encrypt -m $TPMT_MAC_BITS -c $TPMT_SECCURE_CURVE $(<"$currentkey") \
		| base64 >"$keydir/$username/${currentkey:t}"	# we need to store which key it was encrypted with
	if ! [[ $pipestatus[@] =~ ^[0\ ]*$ ]]; then
		die $error_cant_encrypt_password "Error: failed to save encrypted password. Please clean up your working copy manually before retrying."
	fi
	echo "$username" >"$keydir/creator" >"$keydir/last-changed-by"
	echo "$timestamp" >"$keydir/stamp-creation" >"$keydir/stamp-change"
	date --date @$timestamp >>"$keydir/stamp-creation" >>"$keydir/stamp-change"	# also include a human readable date in the 2nd line
	if ! commitmessage="tpmt: $username: add password $pwid (comment: $comment)" revctrl add-and-commit "$keydir"; then
		die $error_failed_commit_password "Error committing $keydir to revision control. Please sort it out manually."
	fi
	log 1 "Successfully added password '$pwid'."
	for u in "$grant_users[@]"; do
		grant_access "$pwid" "$u"
	done
}

zmodload zsh/datetime	# We'll need at least $EPOCHSECONDS, to generate keyids
typeset -A passwords	# a hash to store decrypted passwords, indexed by pwid; helps avoid excessive prompting, but is insecure on multi-user systems
typeset -A pwsalts		# a hash to store salts of passwords, indexed by pwid
typeset -A passphrases	# a hash to store passphrases (seccure private keys), indexed by keyid; helps avoid excessive prompting, but is insecure on multi-user systems
typeset -A ppsalts		# a hash to store salts of passphrases, indexed by pwid
typeset -A currentkeys	# a hash to store the keyid of the most recent key of each user, indexed by username, to speed up lookups

